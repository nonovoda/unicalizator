import logging
import os
import io
import tempfile

from telegram import Update, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from PIL import Image, ImageFilter
import moviepy.editor as mpy

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

def transform_text(text: str) -> str:
    mapping = {
        'A': 'ùíú', 'B': 'ùíù', 'C': 'ùíû', 'D': 'ùíü', 'E': 'ùí†',
        'a': 'ùí∂', 'b': 'ùí∑', 'c': 'ùí∏', 'd': 'ùíπ', 'e': 'ùí∫'
    }
    return ''.join(mapping.get(char, char) for char in text)

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    original_text = update.message.text
    new_text = transform_text(original_text)
    await update.message.reply_text(f"–£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{new_text}")

def process_image(image_bytes: bytes) -> bytes:
    with Image.open(io.BytesIO(image_bytes)) as img:
        img = img.filter(ImageFilter.GaussianBlur(radius=2))
        data = list(img.getdata())
        new_img = Image.new(img.mode, img.size)
        new_img.putdata(data)
        output = io.BytesIO()
        new_img.save(output, format="JPEG")
        return output.getvalue()

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo_file = await update.message.photo[-1].get_file()
    image_bytes = await photo_file.download_as_bytearray()
    processed_image = process_image(image_bytes)
    await update.message.reply_photo(
        photo=InputFile(io.BytesIO(processed_image), filename="unique.jpg")
    )

def process_video(video_path: str, output_path: str):
    try:
        clip = mpy.VideoFileClip(video_path)
        new_clip = clip.fx(mpy.vfx.speedx, factor=0.8)
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –±–µ–∑ –∞—É–¥–∏–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        new_clip.write_videofile(
            output_path,
            codec="libx264",
            audio=False,  # –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞—É–¥–∏–æ
            threads=1,
            ffmpeg_params=["-preset", "ultrafast"],
            logger="bar"  # –≤—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏
        file_size = os.path.getsize(output_path)
        if file_size < 1024:
            raise ValueError(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª: {file_size} –±–∞–π—Ç")
    finally:
        new_clip.close()
        clip.close()

async def video_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    video_file = await update.message.video.get_file()

    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    with tempfile.NamedTemporaryFile(suffix=".mp4", delete=False) as temp_in:
        video_path = temp_in.name

    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    video_bytes = await video_file.download_as_bytearray()
    with open(video_path, "wb") as f:
        f.write(video_bytes)

    with tempfile.NamedTemporaryFile(suffix=".mp4", delete=False) as temp_out:
        output_path = temp_out.name

    try:
        process_video(video_path, output_path)
        await update.message.reply_video(video=InputFile(output_path))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.")
    finally:
        os.remove(video_path)
        os.remove(output_path)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏.")

def main():
    TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    application.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    application.add_handler(MessageHandler(filters.VIDEO, video_handler))
    application.run_polling()

if __name__ == "__main__":
    main()
