import logging
import os
import io
import tempfile

from telegram import Update, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from PIL import Image, ImageFilter
import moviepy.editor as mpy
import sys

# ---------------------------------------------------------------------------------
# 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ---------------------------------------------------------------------------------

# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å (DEBUG, INFO, WARNING, ERROR)
logging.basicConfig(
    stream=sys.stdout,  # –≤—ã–≤–æ–¥–∏–º –ª–æ–≥–∏ –≤ stdout
    level=logging.DEBUG,  # DEBUG - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# ---------------------------------------------------------------------------------
# 2. –§—É–Ω–∫—Ü–∏—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
# ---------------------------------------------------------------------------------

def transform_text(text: str) -> str:
    mapping = {
        'A': 'ùíú', 'B': 'ùíù', 'C': 'ùíû', 'D': 'ùíü', 'E': 'ùí†',
        'a': 'ùí∂', 'b': 'ùí∑', 'c': 'ùí∏', 'd': 'ùíπ', 'e': 'ùí∫'
    }
    return ''.join(mapping.get(char, char) for char in text)

# ---------------------------------------------------------------------------------
# 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ—Ç–æ
# ---------------------------------------------------------------------------------

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {user_text}")
    new_text = transform_text(user_text)
    await update.message.reply_text(f"–£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{new_text}")

def process_image(image_bytes: bytes) -> bytes:
    logger.debug("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    with Image.open(io.BytesIO(image_bytes)) as img:
        # –ü—Ä–∏–º–µ—Ä: —Ä–∞–∑–º—ã—Ç–∏–µ
        img = img.filter(ImageFilter.GaussianBlur(radius=2))
        # –£–¥–∞–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—è –æ–±—ä–µ–∫—Ç
        data = list(img.getdata())
        new_img = Image.new(img.mode, img.size)
        new_img.putdata(data)
        output = io.BytesIO()
        new_img.save(output, format="JPEG")
        logger.debug("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±—É—Ñ–µ—Ä.")
        return output.getvalue()

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    photo_file = await update.message.photo[-1].get_file()
    image_bytes = await photo_file.download_as_bytearray()
    logger.debug(f"–†–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ: {len(image_bytes)} –±–∞–π—Ç")
    processed_image = process_image(image_bytes)
    await update.message.reply_photo(
        photo=InputFile(io.BytesIO(processed_image), filename="unique.jpg")
    )
    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

# ---------------------------------------------------------------------------------
# 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
# ---------------------------------------------------------------------------------

def process_video(video_path: str, output_path: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ, –∏—Å–ø–æ–ª—å–∑—É—è MoviePy:
    - –ü—Ä–∏–º–µ—Ä: –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ (speedx, factor=0.8)
    - –ó–∞–ø–∏—Å—å —Å –∫–æ–¥–µ–∫–æ–º libx264 –∏ –∞—É–¥–∏–æ–∫–æ–¥–µ–∫–æ–º aac
    - –ü—Ä–µ—Å–µ—Ç ultrafast –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∫–∏
    - threads=1 –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∏—Å–ª–∞ –ø–æ—Ç–æ–∫–æ–≤
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ (logger="bar") –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    """
    logger.debug(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ: {video_path}")
    clip = mpy.VideoFileClip(video_path)

    new_clip = clip.fx(mpy.vfx.speedx, factor=0.8)
    try:
        new_clip.write_videofile(
            output_path,
            codec="libx264",
            audio_codec="aac",
            temp_audiofile="temp-audio.m4a",  # –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∞—É–¥–∏–æ
            remove_temp=True,                 # —É–¥–∞–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            threads=1,
            ffmpeg_params=["-preset", "ultrafast"],
            logger="bar"  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å MoviePy/ffmpeg –≤ –∫–æ–Ω—Å–æ–ª–∏
        )
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–ø—ã –≤ –±–ª–æ–∫–µ finally,
        # —á—Ç–æ–±—ã –æ–Ω–∏ —Ç–æ—á–Ω–æ –±—ã–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        new_clip.close()
        clip.close()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    file_size = os.path.getsize(output_path)
    logger.info(f"–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_path}, —Ä–∞–∑–º–µ—Ä {file_size} –±–∞–π—Ç")
    if file_size < 1024:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª, –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.")

async def video_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    video_file = await update.message.video.get_file()

    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    with tempfile.NamedTemporaryFile(suffix=".mp4", delete=False) as temp_in:
        video_path = temp_in.name

    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
    video_bytes = await video_file.download_as_bytearray()
    logger.debug(f"–†–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ: {len(video_bytes)} –±–∞–π—Ç")

    with open(video_path, "wb") as f:
        f.write(video_bytes)
    logger.debug(f"–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {video_path}")

    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    with tempfile.NamedTemporaryFile(suffix=".mp4", delete=False) as temp_out:
        output_path = temp_out.name

    try:
        process_video(video_path, output_path)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_video(video=InputFile(output_path))
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        os.remove(video_path)
        os.remove(output_path)
        logger.debug("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")

# ---------------------------------------------------------------------------------
# 5. –ö–æ–º–∞–Ω–¥–∞ /start
# ---------------------------------------------------------------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏.")

# ---------------------------------------------------------------------------------
# 6. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è main()
# ---------------------------------------------------------------------------------

def main():
    TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not TOKEN:
        logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        raise ValueError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN")

    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    application.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    application.add_handler(MessageHandler(filters.VIDEO, video_handler))

    logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    application.run_polling()

if __name__ == "__main__":
    main()
